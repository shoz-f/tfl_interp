# style-based GAN

```elixir
File.cd!(__DIR__)
# for windows JP
System.shell("chcp 65001")
System.put_env("NNCOMPILED", "YES")

Mix.install([
  {:tfl_interp, "~> 0.1.12"},
  {:cimg, "~> 0.1.19"},
  {:kino, "~> 0.7.0"}
])
```

## 0.Original work

"Training Generative Adversarial Networks with Limited Data"

* https://arxiv.org/abs/2006.06676

GitHub: StyleGAN2 with adaptive discriminator augmentation

* https://github.com/NVlabs/stylegan2-ada

GitHub: sugyan/gan-playground

* https://github.com/sugyan/gan-playground

The tflite model `idol-face-2021-03.tflite` is converted from sugyan's pretraind model.

***Thanks a lot!!!***

---

## Implementation with TflInterp in Elixir

## 1.Defining the inference module: StyleGAN2ADA

* Model

  idol-face-2021-03.tflite: get from "https://github.com/shoz-f/tfl_interp/releases/download/0.0.1/idol-face-2021-03.tflite" if not existed.

* Pre-processing

  Make a latent - 512 size normal random number vector.

* Post-processing

  The generated image is outputted directly by this model.

```elixir
defmodule StyleGAN2ADA do
  @width 256
  @height 256

  alias TflInterp, as: NNInterp

  use NNInterp,
    model: "./model/idol-face-2021-03.tflite",
    url: "https://github.com/shoz-f/tfl_interp/releases/download/0.0.1/idol-face-2021-03.tflite",
    inputs: [f32: {1, 512}],
    outputs: [u8: {1, @height, @width, 3}]

  def apply() do
    # preprocess
    input0 = for _ <- 1..512, into: "", do: <<:rand.normal()::little-float-32>>

    # prediction
    output0 =
      session()
      |> NNInterp.set_input_tensor(0, input0)
      |> NNInterp.invoke()
      |> NNInterp.get_output_tensor(0)

    # postprocess
    CImg.from_binary(output0, @width, @height, 1, 3, dtype: "<u1")
  end
end
```

Launch `StyleGAN2ADA`.

```elixir
# TflInterp.stop(StyleGAN2ADA)
StyleGAN2ADA.start_link([])
```

Display the properties of the `StyleGAN2ADA` model.

```elixir
TflInterp.info(StyleGAN2ADA)
```

## 2.Let's try it

Load a photo and apply StyleGAN2ADA to it.

```elixir
Enum.into(1..8, [], fn _ -> StyleGAN2ADA.apply() |> CImg.display_kino(:jpeg) end)
|> Kino.Layout.grid(columns: 4)
```

&#9633;
